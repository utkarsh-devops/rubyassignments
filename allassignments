Ruby Assignments :

1) Compute the sum of cubes for a given range a through b. Write a method called sum_of_cubes to accomplish this task. Example Given range 1 to 3 the method should return 36.

def sum_of_cubes(a, b)
  (a..b).inject(0) { |sum, x| sum += (x*x*x) }
end

sum_of_cubes(1,3)

………………………………………………………………………………………………..
2) Given an Array, return the elements that are present exactly once in the array. You need to write a method called non_duplicated_values to accomplish this task. Example: Given [1,2,2,3,3,4,5], the method should return [1,4,5].

def non_duplicated_values(values)
  values.find_all { |x| values.count(x) == 1 }
end

a1=[1,2,2,3,3,4,5]

non_duplicated_values(a1)

………………………………………………………………………………………………………..
3) Given a sentence, return true if the sentence is a palindrome. You are supposed to write a method palindrome? to accomplish this task. 
Note Ignore whitespace and cases of characters. Example: Given "Never odd or even" the method should return true.

def palindrome?(str)
str1=str.delete(' ')
str2=str.delete(' ').reverse
if str1.eql?(str2)
puts "palindrome"
else
puts "not palindrome"
end
end

str="never odd or even"
puts str
palindrome?(str)




…………………………………………………………………………………………………….
4) 9 is a Kaprekar number since 9 ^ 2 = 81 and 8 + 1 = 9, 297 is also Kaprekar number since 297 ^ 2 = 88209 and 88 + 209 = 297. In short, for a Kaprekar number k with n-digits, if you square it and add the right n digits to the left n or n-1 digits, the resultant sum is k. Find if a given number is a Kaprekar number.

def kaprekar?(k)
  ks = k**2
  lenf = (ks.to_s.length)-1
  lenh = (ks.to_s.length / 2) - 1
  a = ks.to_s[0..lenh].to_i
  b = ks.to_s[lenh+1..lenf].to_i
  k == (a+b)
end


……………………………………………………………………………………..
String 1 :
RUBY parses a file by looking for <br/> one of the special tags that tells it to start interpreting the text as RUBY code. The parser then executes all of the code it finds until it runs into a RUBY closing <br/> tag.

string1=”RUBY parses a file by looking for <br/> one of the special tags that tells it to start interpreting the text as RUBY code. The parser then executes all of the code it finds until it runs into a RUBY closing <br/> tag.”

…………………………………………………………………………………………...
String 2 :
RUBY does not require (or support) explicit type definition in variable declaration; a variable's type is determined by the context in which the variable is used.

string2=”RUBY does not require (or support) explicit type definition in variable declaration; a variable's type is determined by the context in which the variable is used.”


……………………………………………………………………………………………………..
5) Find occurance of RUBY from string 1.

string1.class

puts string1.scan(/RUBY/)

puts string1.scan('RUBY').size()


………………………………………………………………………………………………………...
6) Find the position where RUBY occures in the string 1.

string1.enum_for(:scan, /RUBY/).map { Regexp.last_match.begin(0) }

…….
7) Create array of words in string 1 & print them using a recursive function.

ar=string1.split(' ')

p ar


……………………………………………………………………………………………………...
8) Capitalise string 1

string1.upcase()


…………………………………………………………………………………………………….
9) Combine string 1 & 2.

string1+string2


…………...
10) Print current date.

puts Time.now

require 'date'
puts Date.today.to_s


……………………………………………………………………………………………………...
11) print 12th Jan 2012

time=Time.now

puts time.strftime("%dth-%m-%Y")

………………………………………………………………………………………………………...
12) add 7 days in current date

Time.now + (3600*24*7)

…………………………………………………………………………………………………………...
13) Cut the string 1 into 4 parts & print it.

string1.split(' ',4)




………………………………………………………………………………………………………………...
14) Divide the string 1 by occurances of '.'. Combine the array in reverse word sequence

(string1.split('.')[0].split+string1.split('.')[1].split).reverse 


………………………………………………………………………………………………………..
15) Remove the HTML characters from string.

string1.gsub(/<\/?[^>]*>/, "")

………………………………………………………………………………………………..
16) Print the 'RUBY' word from string 1 by traversing it using string functions

puts string1.scan('RUBY')

………………………………………………………………………………………………...
17) Find the length of string 1 & 2.

string1.length
string2.length

…...
18) Compare 
two dates. (12-04-2010 & 12-05-2011). Calculate the days between these two dates.

require 'date'
d1 = Date.parse("12/04/2010")
d2 = Date.parse("12/05/2011")
puts (d1-d2).to_i


…………………………………………………………………………………………………………….
19) Print date after 20 days from current date

puts Time.now + (3600*24*20)

………………………………………………………………………………………………………….
20) Print date in array format.

Time.now.to_a







…………………………………………………………………………………………………..
21) write regex for email for only weboniselab domain

email = "utkarsh.sharma@weboniselab.com"
puts "\nEmail Address = #{email}"
regex = /^[a-zA-Z0-9\d\-.]+[a-zA-Z0-9]+@(weboniselab).[a-z]*/
if( email.match regex )
  puts "\n Email Address is valid"
else
  puts " \nEmail Address is not valid"
end
                  
…………………………………………………………………………………………………..
22) write regex for phone no format : '+78'followed by 8 nos. 
e.g. +7898328732

num = 7812546987
puts "Mobile Number = #{num}"
regex = /^78[0-9]{8}/
if(num.to_s.match regex)
 puts " Given Number is Valid"
else
 puts"The given Number is  not Valid"
end


………………………………………………………………………………………………………………..
23) finding site name and type from a url string using regex
 http://www.xyz.com/classid/17950142?type=mandatory


url_regex=/^http:\/\/(?:www\.)?(.*?\.(?:com|org\.uk|co\.in))([a-zA-Z0-9\/]*\?type=)([a-z]*)/
url="http://www.xyz.com/classid/17950142?type=mandatory"
m=url.match url_regex
puts "\nDomain name = #{m[1]}"
puts "\ntype = #{m[3]}"

……………………………………………………………………………………………………………………..
24) write regex for this format
 a.bcdef0000000000000e+05

regex = /^[a-z]\.[a-z]{5}0{13}e\+[0-9]{2}$/
num = "a.bcdef0000000000000e+05"
if(num.to_s.match regex)
puts "given format is valid"
else
puts "given format is not valid"
end






…………………………………………………………………………………………………...
25) Write Regex for Following date format
e.g 1) 11th Nov 2013 12:34:46,
e.g 2) 1st Dec 2010 8:59:43

regex1 = /^[1]{2}[t][h]\ [N][o][v]\ [2][0][1][3]\ [1][2]\:[3][4]\:[4][6]$/
regex2 = /^[1][s][t]\ [D][e][c]\ [2][0][1][0]\ [8]\:[5][9]\:[4][3]$/

date1 = "11th Nov 2013 12:34:46"
date2 = "1st Dec 2010 8:59:43"

puts "For Date 11th Nov 2013 12:34:46"
if(date1.to_s.match regex1)
puts "ok"
else
puts "not"
end

puts "For Date 1st Dec 2010 8:59:43 "
if(date2.to_s.match regex2)
puts "ok"
else
puts "not"
end

…………………………………………………………………………………………………..

